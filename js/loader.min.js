!async function(){let w="string"==typeof window.EJS_pathtodata?window.EJS_pathtodata:(n=new URL(document.currentScript.src).pathname).substring(0,n.length-n.split("/").pop().length);var n;function i(n){return new Promise((function(i,o){let d=document.createElement("script");d.src="undefined"!=typeof EJS_paths&&"string"==typeof EJS_paths[n]?EJS_paths[n]:w+n,d.onload=i,d.onerror=()=>{t(n).then((w=>i()))},document.head.appendChild(d)}))}function o(n){return new Promise((function(i,o){let d=document.createElement("link");d.rel="stylesheet",d.href="undefined"!=typeof EJS_paths&&"string"==typeof EJS_paths[n]?EJS_paths[n]:w+n,d.onload=i,d.onerror=()=>{t(n).then((w=>i()))},document.head.appendChild(d)}))}async function t(w){w.includes(".min.")&&!w.includes("socket")&&("emulator.min.js"===w?(await i("emulator.js"),await i("nipplejs.js"),await i("shaders.js"),await i("storage.js"),await i("gamepad.js"),await i("GameManager.js"),await i("socket.io.min.js")):await o("emulator.css"))}w.endsWith("/")||(w+="/"),"undefined"!=typeof EJS_DEBUG_XX&&!0===EJS_DEBUG_XX?(await i("js/emulator.js"),await i("js/nipplejs.js"),await i("js/shaders.js"),await i("js/storage.js"),await i("js/gamepad.js"),await i("js/GameManager.js"),await i("js/socket.io.min.js"),await o("css/emulator.css")):(await i("js/emulator.min.js"),await o("css/emulator.min.css"));const d={};if(d.gameUrl=window.EJS_gameUrl,d.dataPath=w,d.system=window.EJS_core,d.biosUrl=window.EJS_biosUrl,d.gameName=window.EJS_gameName,d.color=window.EJS_color,d.adUrl=window.EJS_AdUrl,d.adMode=window.EJS_AdMode,d.adTimer=window.EJS_AdTimer,d.adSize=window.EJS_AdSize,d.alignStartButton=window.EJS_alignStartButton,d.VirtualGamepadSettings=window.EJS_VirtualGamepadSettings,d.buttonOpts=window.EJS_Buttons,d.volume=window.EJS_volume,d.defaultControllers=window.EJS_defaultControls,d.startOnLoad=window.EJS_startOnLoaded,d.fullscreenOnLoad=window.EJS_fullscreenOnLoaded,d.filePaths=window.EJS_paths,d.loadState=window.EJS_loadStateURL,d.cacheLimit=window.EJS_CacheLimit,d.cheats=window.EJS_cheats,d.defaultOptions=window.EJS_defaultOptions,d.gamePatchUrl=window.EJS_gamePatchUrl,d.gameParentUrl=window.EJS_gameParentUrl,d.netplayUrl=window.EJS_netplayServer,d.gameId=window.EJS_gameID,d.backgroundImg=window.EJS_backgroundImage,d.backgroundBlur=window.EJS_backgroundBlur,d.backgroundColor=window.EJS_backgroundColor,d.controlScheme=window.EJS_controlScheme,d.threads=window.EJS_threads,d.disableCue=window.EJS_disableCue,d.startBtnName=window.EJS_startButtonName,d.softLoad=window.EJS_softLoad,d.screenRecording=window.EJS_screenRecording,d.externalFiles=window.EJS_externalFiles,d.disableDatabases=window.EJS_disableDatabases,d.disableLocalStorage=window.EJS_disableLocalStorage,d.forceLegacyCores=window.EJS_forceLegacyCores,d.noAutoFocus=window.EJS_noAutoFocus,d.shaders=Object.assign({},window.EJS_SHADERS,window.EJS_shaders?window.EJS_shaders:{}),"string"==typeof window.EJS_language&&"en-US"!==window.EJS_language)try{let w;w="undefined"!=typeof EJS_paths&&"string"==typeof EJS_paths[window.EJS_language]?EJS_paths[window.EJS_language]:"/data/"+window.EJS_language+".json",d.language=window.EJS_language,d.langJson=JSON.parse(await(await fetch(w)).text())}catch(w){d.langJson={}}window.EJS_emulator=new EmulatorJS(EJS_player,d),window.EJS_adBlocked=(w,n)=>window.EJS_emulator.adBlocked(w,n),"function"==typeof window.EJS_ready&&window.EJS_emulator.on("ready",window.EJS_ready),"function"==typeof window.EJS_onGameStart&&window.EJS_emulator.on("start",window.EJS_onGameStart),"function"==typeof window.EJS_onLoadState&&window.EJS_emulator.on("loadState",window.EJS_onLoadState),"function"==typeof window.EJS_onSaveState&&window.EJS_emulator.on("saveState",window.EJS_onSaveState),"function"==typeof window.EJS_onLoadSave&&window.EJS_emulator.on("loadSave",window.EJS_onLoadSave),"function"==typeof window.EJS_onSaveSave&&window.EJS_emulator.on("saveSave",window.EJS_onSaveSave)}();